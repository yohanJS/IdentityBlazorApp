@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">iDate Smart</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @if (!isIsSigned)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Identity/Account/Login">
                    <span class="oi oi-briefcase" aria-hidden="true"></span> Login
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Identity/Account/Register">
                    <span class="oi oi-briefcase" aria-hidden="true"></span> Register
                </NavLink>
            </div>
        }
        @if (isIsSigned)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Identity/Account/Manage">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Manage Account
                </NavLink>
            </div>
            <div class="nav-item">
                <div class="nav-link">
                    <form class="input-group" method="post" action="Identity/Account/LogOut">
                        <button type="submit" class="btn btn-danger w-100">Log out</button>
                    </form>
                </div>
            </div>
        }
    </nav>
</div>


@code {
    private bool collapseNavMenu = true;
    private bool isIsSigned = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private Task<AuthenticationState>? user { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                isIsSigned = true;
            }
        }

    }

}
